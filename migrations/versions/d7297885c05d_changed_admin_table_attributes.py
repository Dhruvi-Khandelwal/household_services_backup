from alembic import op
import sqlalchemy as sa

# revision identifiers, used by Alembic.
revision = 'd7297885c05d'
down_revision = None  # Set this to the previous revision if needed
branch_labels = None
depends_on = None

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('admin', schema=None) as batch_op:
        # Adding the new columns 'email' and 'password' to match the model
        batch_op.add_column(sa.Column('email', sa.String(length=255), nullable=False))
        batch_op.add_column(sa.Column('password', sa.String(length=255), nullable=False))
        
        # Create the unique constraint for 'email'
        batch_op.create_unique_constraint('email', ['email'])  # Correct constraint name
        
        # Drop the old columns ('admin_email' and 'admin_password')
        batch_op.drop_column('admin_email')
        batch_op.drop_column('admin_password')
    # ### end Alembic commands ###

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('admin', schema=None) as batch_op:
        # Revert to the old column names for downgrade (before migration)
        batch_op.add_column(sa.Column('admin_email', sa.VARCHAR(length=255), nullable=False))
        batch_op.add_column(sa.Column('admin_password', sa.VARCHAR(length=255), nullable=False))
        
        # Drop the unique constraint by its name
        batch_op.drop_constraint('email', type_='unique')  # Use the same constraint name
        
        # Drop the new columns 'email' and 'password'
        batch_op.drop_column('password')
        batch_op.drop_column('email')
    # ### end Alembic commands ###
